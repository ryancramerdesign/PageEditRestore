<?php namespace ProcessWire;

/**
 * Page Edit Restore
 * 
 * Prevents page edits in the admin from getting lost when a user session is lost.
 *
 * © 2023 by Ryan Cramer
 * 
 * @property int $pingTime
 * @property bool|int $useSavePost Allow saving/restoring of unsaved changes?
 * @property bool|int $useUserCookie Set cookie in page editor and validate before accepting guest POST.
 * @property bool|int $usePostCookie Set cookie during guest POST and validate before allowing page editor restore.
 * @property bool|int $useLog Enable logging of activity?
 * 
 */
class PageEditRestore extends WireData implements Module, ConfigurableModule {
	
	public static function getModuleInfo() {
		return array(
			'title' => 'Page Edit Restore',
			'version' => 2,
			'summary' => 'Prevents page edits in the admin from getting lost when a user session is lost.',
			'requires' => 'ProcessWire>=3.0.210',
			'author' => 'Ryan Cramer',
			'href' => 'https://processwire.com/blog/posts/page-edit-restore-module/',
			'autoload' => true,
		);
	}
	
	const debug = false;

	/**
	 * Name to use for page editor input holding PageEditRestore JSON info
	 * 
	 * @var string 
	 * 
	 */
	protected $inputName = '_PageEditRestore_';

	/**
	 * Cookie name set when non-authenticated POST data is received
	 * 
	 * This cookie name is also appended with the page ID. It is confirmed
	 * in the page editor after the user logs back in.
	 * 
	 * @var string 
	 * 
	 */
	protected $postCookieName = 'pw_per_p';

	/**
	 * Cookie name to use for user that has been in page editor
	 * 
	 * This is set from the page editor and confirmed when non-authenticated 
	 * POST data is received. 
	 * 
	 * @var string 
	 * 
	 */
	protected $userCookieName = 'pw_per_u';
	
	/**
	 * Construct
	 * 
	 */
	public function __construct() {
		$this->set('pingTime', 60);
		$this->set('useSavePost', true);
		$this->set('useUserCookie', true);
		$this->set('usePostCookie', true);
		$this->set('useLog', true);
		parent::__construct();
	}

	/**
	 * API ready
	 * 
	 */
	public function ready() {
		
		if(!isset($_SERVER['REQUEST_URI'])) return; // CLI mode

		$config = $this->wire()->config;
		$url = $_SERVER['REQUEST_URI'];
		$adminUrl = $config->urls->admin;
		
		// exclude all non-admin requests
		if(strpos($url, $adminUrl) === false) return;
		
		$user = $this->wire()->user;
		$input = $this->wire()->input;

		$editUrl = $adminUrl . 'page/edit/';
		$isGuest = $user->isGuest();
		$isPost = $input->requestMethod('POST');
		$module = $this;
		$input = $this->wire()->input;

		/*** ADMIN REQUEST ***********************************************************/
		
		if($isGuest) {
			// add a hook after login to perform module maintenance
			if(strpos($url, $config->urls->admin) === 0) {
				$this->addHookAfter('ProcessLogin::afterLogin', function($event) use($module) {
					if($event) $module->maintenance();
				});
			}
		}
		
		if(strpos($url, $editUrl) !== 0) return;
		
		/*** PAGE EDITOR REQUEST ****************************************************/
		
		if($isGuest) {
			// page editor request for user that is NOT logged-in
			if($isPost && !empty($_POST[$this->inputName . 'info']) && $this->useSavePost && !$config->ajax) {
				// this is a POST request to the page editor
				if($this->saveGuestPost()) $this->warning(
					$this->_('Oops, it looks like you are no longer logged in and your changes are not yet saved to the page.') . ' ' .
					$this->_('Please login now to return to your edits, then choose the option to “Restore unsaved changes”.'),
					Notice::noGroup
				);
			}
			return;
		}

		/*** AUTHENTICATED USER IN PAGE EDITOR *************************************/

		if($config->ajax) {
			// add a ping URL handler to page editor for JS
			$this->addHookMethod('ProcessPageEdit::executePing', function(HookEvent $event) {
				header('content-type: application/json');
				$session = $event->wire()->session;
				$n = (int) $session->getFor($this, 'n'); 
				$session->setFor($this, 'n', ++$n);
				$event->return = json_encode([ 'ping' => $n ]);
			});
			// do nothing further during ajax requests
			return; 
		}
		
		if(!$this->useSavePost) return;

		if($isPost) {
			// POST request: check if restore action requested
			$action = $input->post("{$this->inputName}restore");
			if($action && $this->wire()->session->CSRF()->validate()) {
				// restore requested
				$this->addHookAfter('ProcessPageEdit::loadPage', function(HookEvent $e) use($action, $module) {
					$page = $e->return; /** @var Page $page */
					if($page->id) $module->processAction($page->id, $action);
				});
			}
		} else {
			// GET request: update form 
			$this->addHookAfter('ProcessPageEdit::buildForm', $this, 'hookBuildForm');
			$this->addHookMethod('ProcessPageEdit::executeRestorePreview', $this, 'hookRestorePreview');
		}
	}

	/**
	 * Save POST request submited by non-authenticated user
	 * 
	 * @return bool
	 * 
	 */
	protected function saveGuestPost() {
		
		$logName = 'saveGuestPost:';
		
		if(empty($_POST['id']) || !ctype_digit("$_POST[id]") || ((int) $_POST['id']) < 1) {
			$this->log("$logName post does not have a valid id var"); 
			return false;
		}
		
		$pageId = (int) $_POST['id'];
		$infoName = $this->inputName . 'info';
		
		if(!isset($_POST[$infoName])) {
			$this->log("$logName post lacks $infoName variable");
			return false;
		}

		// decode the identification variable and validate
		$info = json_decode($_POST[$infoName], true);
		
		if(!is_array($info)) {
			$this->log("$logName post var $infoName is not valid JSON");
			return false;
		}
		
		if(!isset($info['token']) || !isset($info['id']) || !isset($info['uid'])) {
			$this->log("$logName post var $infoName is lacking a required property");
			return false;
		}
		
		$uid = (int) $info['uid'];
		if($uid < 1) return false;
		
		$id = (int) $info['id'];
		if($id != $pageId) {
			$this->log("$logName post $infoName.id does not match POST[id]"); 
			return false;
		}
		
		if($info['token'] !== $this->getIdentityToken($id, $uid)) {
			$this->log("$logName post $infoName has an invalid token value");
			return false;
		}
		
		if($this->useUserCookie && !$this->hasValidUserCookie($uid)) {
			$this->log("$logName post request does not have a valid user cookie"); 
			return false;
		}
	
		// assign a cookie to the client that is POST'ing data and confirm it after login
		if($this->usePostCookie) {
			$rand = new WireRandom();
			$cookieValue = $rand->alphanumeric(40);
			$this->wire()->input->cookie->set($this->postCookieName . $id, $cookieValue, [
				'age' => 86400,
				// 'httponly' => true
			]);
			$info['postCookieValue'] = $cookieValue;
		}
		
		$data = $_POST;
		$data[$this->inputName . 'info'] = json_encode($info);
		
		$file = $this->getPostDataFile($id, $uid);
		$result = $this->wire()->files->filePutContents($file, json_encode($data));
		
		if(empty($result)) {
			$this->log("$logName post failed to save " . basename($file)); 
			return false;
		}
		
		$this->log("$logName guest post saved for page $id user $uid"); 
	
		return true;
	}
	
	/**
	 * Update PageEdit form for identification data, provide restore actions when file present
	 * 
	 * @param HookEvent $event
	 *
	 */
	public function hookBuildForm(HookEvent $event) {
		
		$form = $event->return; /** @var InputfieldForm $form */
		$process = $event->object; /** @var ProcessPageEdit $process */
		$page = $process->getPage();
		$user = $this->wire()->user;
		$token = $this->getIdentityToken($page, $user);
		$config = $this->wire()->config;
		$dateFormat = 'Y/m/d H:i';
		
		$config->scripts->add($config->urls($this) . $this->className() . '.js'); 
		$config->js($this->className(), [ 
			'pingTime' => (self::debug ? 30 : $this->pingTime),
			'logoutMsg' =>
				$this->_('Warning, you are no longer logged in.'),
			'saveMsg1' => 
				$this->_('Please click the “Save” button and then login again before making any edits.'),
			'saveMsg2' => 
				$this->_('Click the “Save” button to prevent your changes from getting lost.') . ' ' .
				$this->_('After doing that, it will ask you to login.') . ' ' . 
				$this->_('Once logged in, it will give you the option to restore your unsaved changes.')
		]);
	
		// add additional data to POST request so it can be identified
		$info = [
			'id' => $page->id, 
			'uid' => $user->id, 
			'time' => time(),
			'token' => $token,
		];
		
		$json = htmlspecialchars(json_encode($info), ENT_QUOTES, 'UTF-8');
		$name = $this->inputName;
		
		$form->appendMarkup .= 
			"<input type='hidden' name='{$name}info' value='$json' />";
		
		if($this->useUserCookie) $this->setValidUserCookie();

		// check if there are unsaved changes in a restore file
		$info = $this->loadPostDataFileInfo($page->id, $user->id); 
		if(empty($info)) return;
		
		$u = $this->wire()->users->get((int) $info['uid']); 
		
		// add an Inputfield to give them restore actions
		$this->warning(
			$this->_('There are unsaved changes queued for this page.') . ' ' . 
			$this->_('You may optionally review and restore them.') . ' ' . 
			$this->_('Or, if you didn’t lose any changes, please delete them.')
		);
		
		$f = $form->InputfieldRadios;
		$f->attr('name', $name . 'restore');
		$f->val($token);
		$f->attr('id', $name);
		$f->label = $this->_('You have unsaved changes on this page, what would you like to do?');
		$f->description = $this->_('If you do not recall losing changes due to being logged out, please choose the “delete” option.');
		$f->themeColor = 'highlight';
		$f->themeBorder = 'card';
		$f->icon = 'warning';
		
		$modifiedSince = $page->modified > $info['time'];
		
		$f->notes = 
			sprintf(
				$this->_('Unsaved changes from %s'), 
				$u->name . ' ' . 
				wireDate($dateFormat, $info['time']) . ' ' . 
				'(' . wireRelativeTimeStr($info['time']) . ')'
			); 
		
		if($modifiedSince) $f->notes .= "\n" . 
			sprintf(
				$this->_('Page last modified by %s'), 
				$page->modifiedUser->name . ' ' . 
				wireDate($dateFormat, $page->modified) . ' ' .
				'(' . wireRelativeTimeStr($page->modified) . ')'
			);
		
		if($modifiedSince) {
			$f->description .= ' ' . 
				$this->_('Warning, this page has been modified after the unsaved changes, restoring may overwrite newer data.'); 
		}
		
		$f->notes .= "\n" . 
			'[' . $this->_('Click here to preview unsaved changes (JSON)') . ']' . 
			"(./restore-preview/?id=$info[id])";

		$f->addOption('restore', $this->_('Restore unsaved changes now'));
		$f->addOption('test', $this->_('Test what will be changed if you restore'));
		$f->addOption('delete', $this->_('Delete unsaved changes'));
		$f->addOption('ignore', $this->_('Ignore'));
		$f->val('ignore');
		$f->appendMarkup .= "<script>$('#wrap_$name').find('a').addClass('pw-modal')</script>";
		$form->prepend($f);
	}

	/**
	 * Adds a /restore-preview/ URL to the page editor
	 * 
	 * @param HookEvent $event
	 * @throws Wire404Exception
	 * @throws WireException
	 * @throws WirePermissionException
	 * 
	 */
	public function hookRestorePreview(HookEvent $event) {
		$input = $this->wire()->input;
		$id = (int) $input->get('id');
		if($id < 1) wire404();
		$page = $this->wire()->pages->get($id);
		$user = $this->wire()->user;
		if(!$page->id) wire404();
		if(!$page->editable()) throw new WirePermissionException("Page not editable");
		$data = $this->loadPostDataFile($page->id, $user->id);
		if(empty($data)) throw new WireException("No restore data available"); 
		$data = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE); 
		$data = htmlspecialchars($data, true, 'UTF-8');
		$event->return = "<pre style='white-space:pre-wrap'>$data</pre>";
	}

	/**
	 * Process a page editor restore action
	 * 
	 * @param int $pageId
	 * @param string $action One of 'restore', 'delete' or '' (blank)
	 * 
	 */
	public function processAction($pageId, $action) {
		
		$user = $this->wire()->user;
		
		if($action === 'restore') {
			// restore unsaved changes
			$this->processActionRestore($pageId);
			
		} else if($action === 'test') {
			// test what will be changed
			$this->processActionTest($pageId);

		} else if($action === 'delete') {
			// delete unsaved changes
			$this->deletePostDataFile($pageId, $user->id);
			$this->message($this->_('Deleted unsaved changes'));
			$this->log("deleted unsaved data for page $pageId user $user->id ($user->name)");
			
		} else if($action === 'ignore') {
			// ignore/decide later
			
		} else {
			// unknown action
		}
	}

	/**
	 * Process restore action
	 * 
	 * @param int $pageId
	 * 
	 */
	protected function processActionRestore($pageId) {
		// restore unsaved changes
		$user = $this->wire()->user;
		$input = $this->wire()->input;
		$data = $this->loadPostDataFile($pageId, $user->id);
		$changes = [];

		if(empty($data)) return;

		foreach($data as $key => $value) {
			if(!isset($_POST[$key]) || $_POST[$key] !== $value) {
				$_POST[$key] = $value;
				$input->post->set($key, $value);
				$changes[] = $key;
			}
		}

		unset($data);

		$this->deletePostDataFile($pageId, $user->id);
		
		if(count($changes)) {
			$changes = implode(', ', $changes);
			$this->message($this->_('Restored unsaved changes') . " - $changes");
			$this->log("restored unsaved data to page $pageId user $user->id ($user->name) - $changes");
		} else {
			$this->message($this->_('No differences found to restore'));
		}
	}

	/**
	 * Process test action
	 *
	 * @param int $pageId
	 *
	 */
	protected function processActionTest($pageId) {
		
		$sanitizer = $this->wire()->sanitizer;
		$user = $this->wire()->user;
		$data = $this->loadPostDataFile($pageId, $user->id);
		$changes = [];

		if(empty($data)) return;
		foreach($data as $key => $value) {
			if(!isset($_POST[$key]) || $_POST[$key] !== $value) $changes[] = $key;
		}

		if(count($changes)) {
			$js = 'script';
			$this->warning(
				$sanitizer->entities($this->_('The following inputs will be changed during restore')) . ' - ' .
				$sanitizer->entities(implode(', ', $changes)) .
				"<$js>ProcessWire.config['PageEditRestore'].changes=" . json_encode($changes) . "</$js>",
				Notice::allowMarkup | Notice::noGroup
			);
		} else {
			$this->warning(
				$this->_('No inputs will be modified by restoring unsaved changes.'),
				Notice::noGroup
			);
		}
	}

	/**
	 * Get server path where restore files should be saved
	 * 
	 * @param bool $create
	 * @return string
	 * 
	 */
	protected function getFilesPath($create = true) {
		$path = $this->wire()->config->paths->cache . $this->className() . '/';
		if($create && !is_dir($path)) $this->wire()->files->mkdir($path);
		return $path;
	}

	/**
	 * Get filename for restore file
	 * 
	 * @param int $pageId
	 * @param int $userId
	 * @return string
	 * 
	 */
	protected function getPostDataFile($pageId, $userId) {
		$file = $this->getFilesPath() . "page.$pageId.$userId.json";
		return $file;
	}

	/**
	 * Return data in POST save file or false if not present
	 * 
	 * @param int $pageId
	 * @param int $userId
	 * @param bool $getInfoOnly Only get info rather than all data?
	 * @return array|false
	 * 
	 */
	protected function loadPostDataFile($pageId, $userId, $getInfoOnly = false) {
		
		$file = $this->getPostDataFile($pageId, $userId); 
		if(!is_file($file)) return false;
		
		$data = json_decode(file_get_contents($file), true);
		$info = isset($data[$this->inputName . 'info']) ? $data[$this->inputName . 'info'] : null;
		$info = $info ? json_decode($info, true) : null;
		$invalid = false;
		
		if(empty($info)) {
			$invalid = "data[{$this->inputName}info] is empty";
		} else if(empty($info['token'])) {
			$invalid = "no token is present";
		} else {
			$token = $this->getIdentityToken($info['id'], $info['uid']);
			if($info['token'] != $token) $invalid = "token $token != $info[token]";
		}
		
		if(!$invalid && $this->usePostCookie) {
			$cookieName = $this->postCookieName . $pageId;
			if(empty($info['postCookieValue'])) {
				$invalid = "no cookie is present in info";
			} else {
				$cookieValue = $this->wire()->input->cookie->get($cookieName);
				if($cookieValue !== $info['postCookieValue']) {
					$invalid = "wrong cookie value $cookieValue != $info[postCookieValue]";
				}
			}
		}
		
		if($invalid) {
			// invalid file or data
			if(self::debug) {
				$this->error($invalid);
			} else {
				unlink($file);
			}
			$this->log("loadPostDataFile: $invalid");
			return false;
		}
		
		if($getInfoOnly) return $info;
		
		$skipKeys = [ 'id', '_after_submit_action', '_InputfieldForm' ];
		$skipPrefixes = [ 'TOKEN', 'submit_', $this->inputName ];
		
		foreach($skipKeys as $key) {
			unset($data[$key]);
		}
		
		foreach($data as $key => $value) {
			foreach($skipPrefixes as $skipPrefix) {
				if(strpos($key, $skipPrefix) === 0) {
					unset($data[$key]);
					break;
				}
			}
		}
		
		return $getInfoOnly ? $info : $data;
	}

	/**
	 * Return just the 'info' in save file or false if not present
	 *
	 * @param int $pageId
	 * @param int $userId
	 * @return array|false
	 *
	 */
	protected function loadPostDataFileInfo($pageId, $userId) {
		return $this->loadPostDataFile($pageId, $userId, true);
	}

	/**
	 * Delete a POST data file
	 * 
	 * @param int $pageId
	 * @param int $userId
	 * 
	 */
	protected function deletePostDataFile($pageId, $userId) {
		$file = $this->getPostDataFile($pageId, $userId); 
		if(is_file($file)) unlink($file);
	}

	/**
	 * Get identity token to store in info file and POST info data
	 * 
	 * This is used for confirming the validity of a non-authenticated POST request.
	 * 
	 * @param Page|int $page
	 * @return string
	 * 
	 */
	protected function getIdentityToken($page, $user) {
		if(!$page instanceof Page) $page = $this->wire()->pages->get((int) "$page"); 
		if(!$user instanceof User) $user = $this->wire()->users->get((int) "$user");
		$config = $this->wire()->config;
		$data = [
			$page->id,
			$page->created,
			$user->id,
			$user->created,
			$config->installed,
			$config->httpHost,
			$config->tableSalt,
		];
		$token = sha1(implode('|', $data));
		return $token;
	}
	
	/**
	 * Set a random cookie for user that can be confirm with a copy on the server
	 *
	 * This is set for an authenticated user in the page editor. It is confirmed for
	 * a non-authenticated user submitting a POST request to the page editor.
	 * 
	 * @see hasValidUserCookie()
	 *
	 */
	protected function setValidUserCookie() {

		$input = $this->wire()->input;
		$files = $this->wire()->files;
		$user = $this->wire()->user;
		$userFile = $this->getFilesPath() . "user$user->id.key";
		$userValue = null;

		if(is_file($userFile)) {
			if(filemtime($userFile) > (time() - 86400)) {
				$userValue = $files->fileGetContents($userFile);
			} else {
				$files->unlink($userFile);
			}
		}

		if(empty($userValue)) {
			$rand = new WireRandom();
			$userValue = $rand->alphanumeric(60);
			$files->filePutContents($userFile, $userValue);
		}

		$input->cookie->set($this->userCookieName, $userValue, [
			'age' => (86400 * 7),
			// 'httponly' => true
		]);
	}

	/**
	 * Does non-authenticated user have a valid page editor cookie?
	 *
	 * This is called when a non-authenticated POST request is received to the
	 * page editor URL. It confirms that the user was in the page editor prior.
	 *
	 * @param int $userId
	 * @return bool
	 * @see setValidUserCookie()
	 *
	 */
	protected function hasValidUserCookie($userId) {

		$input = $this->wire()->input;
		$files = $this->wire()->files;
		$userFile = $this->getFilesPath() . "user$userId.key";
		$cookieValue = $input->cookie->get($this->userCookieName);
		$userValue = is_file($userFile) ? $files->fileGetContents($userFile) : null;

		return $userValue !== null && $userValue === $cookieValue;
	}

	/**
	 * Clear old files
	 * 
	 */
	public function maintenance() {
		$path = $this->getFilesPath(false);
		if(!$path || !is_dir($path)) return;
		$oneDayAgo = time() - 86400;
		$oneWeekAgo = time() - (86400 * 7);
		$files = $this->wire()->files;
		foreach(new \DirectoryIterator($path) as $file) {
			if($file->isDot() || $file->isDir()) continue;
			$expired = false;
			$ext = $file->getExtension();
			if($ext === 'json' && $file->getMTime() < $oneDayAgo) $expired = true; 
			if($ext === 'key' && $file->getMTime() < $oneWeekAgo) $expired = true;
			if($expired) $files->unlink($file->getPathname());
		}
	}
	
	/**
	 * Log a message for this class
	 *
	 * @param string $str 
	 * @param array $options 
	 * @return WireLog
	 *
	 */
	public function ___log($str = '', array $options = array()) {
		return parent::___log(($this->useLog ? $str : ''), $options);
	}

	/**
	 * Module config
	 * 
	 * @param InputfieldWrapper $inputfields
	 *
	 */
	public function getModuleConfigInputfields(InputfieldWrapper $inputfields) {
		$sanitizer = $this->wire()->sanitizer;
		$f = $inputfields->InputfieldInteger;
		$f->attr('name', 'pingTime');
		$f->label = $this->_('How often to ping server in background to prevent session expiration'); 
		$f->icon = 'clock-o';
		$f->description =
			$this->_('This feature remains active only while the user is in the page editor.') . ' ' . 
			$this->_('Pinging the server in the background ensures the session is not lost due to timeout.') . ' ' . 
			$this->_('This feature also detects and alerts the user when they have been logged out.') . ' ' . 
			$this->_('When logged out, it provides instructions on how to save and restore their unsaved changes.') . ' ' .
			$this->_('When this feature is enabled, it is somewhat less likely that the user will need the other features in this module.') . ' ' .
			$this->_('To disable this feature, set the value to 0.');
		$f->appendMarkup = 
			"<span class='detail'> " . $sanitizer->entities1($this->_('Seconds')) . "</span>" . 
			"<p class='notes'>" . 
			$this->_('If you are also using the UserActivity Pro module, this feature has some overlap with it.') . ' ' . 
			$this->_('In this case, consider setting to to a higher number of seconds like 600 (10 minutes) or more, or 0 to disable.') . 
			"</p>";
		$f->val((int) $this->pingTime);
		$f->min = 0;
		$inputfields->add($f);
		
		$f = $inputfields->InputfieldToggle;
		$f->attr('name', 'useSavePost'); 
		$f->icon = 'life-saver';
		$f->label = $this->_('Allow saving of unsaved changes when user is logged out?'); 
		$f->description = 
			$this->_('Enables users to save unsaved changes in the page editor even if they have been logged out.') . ' ' . 
			$this->_('Then it enables them to restore those changes once they are logged-in again.');
		$f->notes = 
			$this->_('This feature is useful especially for large textarea fields like TinyMCE and CKEditor fields.') . ' ' . 
			$this->_('It should also work with most other field types, though not necessarily all field types.'); 
		$f->val((int) $this->useSavePost);
		$inputfields->add($f);
		
		$fs = $inputfields->InputfieldFieldset;
		$fs->attr('id+name', '_validation_fieldset');
		$fs->label = $this->_('Security and validation');
		$fs->icon = 'shield';
		$fs->showIf = 'useSavePost=1';
		$fs->description = 
			$this->_('By default this module validates with a special token unique to each site, page and user.') . ' ' . 
			$this->_('It contains the hashed value of page and user ID and creation times, http host, site install time, and unique “table salt” value.') . ' ' . 
			$this->_('The following additional validations are recommended to further enhance the security of this module.') . ' ' . 
			$this->_('Though note that they would prevent saving/restoring of unsaved changes if the user’s cookies were lost or corrupted.');
		$inputfields->add($fs);
		
		$f = $inputfields->InputfieldToggle;
		$f->attr('name', 'useUserCookie'); 
		$f->label = $this->_('Validate cookie before saving unsaved changes?'); 
		$f->icon = 'check';
		$f->val((int) $this->useUserCookie);
		$f->description = 
			$this->_('This is an extra validation that verifies the user was editing the page before we allow saving unsaved changes.') . ' ' . 
			$this->_('When enabled, we will set a random cookie for the authenticated user in the page editor.') . ' '  . 
			$this->_('If the user attempts to save when logged-out, the cookie value must match the one set while they were logged in.');
		$fs->add($f);

		$f = $inputfields->InputfieldToggle;
		$f->attr('name', 'usePostCookie');
		$f->label = $this->_('Validate cookie before restoring unsaved changes?');
		$f->icon = 'check';
		$f->val((int) $this->usePostCookie);
		$f->description = 
			$this->_('This extra validation verifies that user restoring unsaved changes is the same one that saved them while logged out.') . ' ' . 
			$this->_('When enabled, we will set a random cookie for the logged-out user when storing their unsaved changes.') . ' ' . 
			$this->_('Upon login and restore, the cookie value must match the one set when they were logged-out.'); 
		$fs->add($f);
		
		$f = $inputfields->InputfieldToggle;
		$f->attr('name', 'useLog');
		$f->label = $this->_('Log activity in Setup > Logs > page-edit-restore?');
		$f->icon = 'history';
		$f->val((int) $this->useLog);
		$inputfields->add($f);
	}

	/**
	 * Install
	 * 
	 */
	public function ___install() {
		$this->getFilesPath();
	}

	/**
	 * Uninstall
	 * 
	 */
	public function ___uninstall() {
		$path = $this->getFilesPath(false);
		if($path && is_dir($path)) $this->wire()->files->rmdir($path, true);
	}
	
}